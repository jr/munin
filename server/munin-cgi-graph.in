#!@@PERL@@ -Tw
#

use RRDs;
use Munin;
use strict;
use IO::Handle;
use Date::Manip;
use POSIX qw(strftime);

my $GRAPHER = "@@LIBDIR@@/munin-graph";
my $conffile = "@@CONFDIR@@/munin.conf";

my %TIMES   = ( "day"   => ["--noweek", "--nomonth", "--noyear"], 
		"week"  => ["--noday", "--nomonth", "--noyear"], 
		"month" => ["--noday", "--noweek", "--noyear"], 
		"year"  => ["--noday", "--noweek", "--nomonth"]
	    );
my %period  = ( "day"   => 300,
		"week"  => 1800,
		"month" => 7200,
		"year"  => 86400
	    );
my $log = new IO::Handle;
my $scale = "day";
my $host  = "";
my $serv  = "";
my $dom   = "";

my $config= &munin_config ($conffile);

my $path = $ENV{PATH_INFO} || "";
$path =~ s/^\///;
($dom, $host) = split /\//, $path;
($host, $serv, $scale) = split /-/, $host;
$scale =~ s/\.png$//;

&verify_parameters ($dom, $host, $serv, $scale);

my $filename = get_picture_filename ($config, $dom, $host, $serv, $scale);

my $time = time;

if (-f $filename)
{
    my @sstats = stat ($filename);
    my $slast_modified = strftime ("%a, %d %b %Y %H:%M:%S %Z", localtime ($sstats[9]));

    if (defined $ENV{HTTP_IF_MODIFIED_SINCE} and 
	    !&modified ($ENV{HTTP_IF_MODIFIED_SINCE}, $sstats[9]-1))
    {
	print "Status: 304\n";
	print "Content-Type: image/png\n";
	print "Expires: ", ($period{$scale}-($time%$period{$scale})), "s\n";
	print "Last-Modified: $slast_modified\n";
	print "\n";
	exit 0;
    }
}

if (! &graph_usable ($filename, $time))
{
    my $ret = (&draw_graph ($host, $serv, $TIMES{$scale}) || "Unknown error");
    if (! -f $filename)
    {
	::logger ("Warning: Could not draw graph \"$host-$serv-$scale.png\": $ret");
	print "Status: 500\n";
	print "Content-Type: image/png\n";
	print "\n";
	exit 0;
    }
}

my @stats = stat ($filename);
my $last_modified = strftime ("%a, %d %b %Y %H:%M:%S %Z", localtime ($stats[9]));

print "Content-Type: image/png\n";
print "Expires: ", ($period{$scale}-($time%$period{$scale})), "s\n";
print "Last-Modified: $last_modified\n";
print "\n";


&graph ($filename);

sub graph
{
    my $filename = shift;

    open (GRAPH, $filename) or die "Warning: Could not open picture file \"$filename\" for reading: $!\n";
    print while (<GRAPH>);
    close (GRAPH);
}

sub get_picture_filename {
    my $config  = shift;
    my $domain  = shift;
    my $name    = shift;
    my $service = shift;
    my $scale   = shift;

    return "$config->{'htmldir'}/$domain/$name-$service-$scale.png";
}

sub logger_open {
    my $dirname = shift;

    if (!$log->opened)
    {
	unless (open ($log, ">>$dirname/munin-cgi-graph.log"))
	{
	    print STDERR "Warning: Could not open log file \"$dirname/munin-cgi-graph.log\" for writing: $!";
	}
    }
}

sub logger {
  my ($comment) = @_;
  my $now = strftime ("%b %d %H:%M:%S", localtime);

  if ($log->opened)
  {
          print $log "$now - $comment\n";
  }
  else
  {
          if (defined $config->{logdir})
          {
                  if (open ($log, ">>$config->{logdir}/munin-cgi-graph.log"))
                  {
                          print $log "$now - $comment\n";
                  }
                  else
                  {
                          print STDERR "Warning: Could not open log file \"$config->{logdir}/munin-cgi-graph.log\" for wr
iting: $!";
                          print STDERR "$now - $comment\n";
                  }
          }
          else
          {
                  print STDERR "$now - $comment\n";
          }
    }
}


sub verify_parameters
{
	my $dom   = shift;
	my $host  = shift;
	my $serv  = shift;
	my $scale = shift;

	if (!$dom)
	{
		print STDERR "Warning: Request for graph without specifying domain. Bailing out.\n";
		exit 1;
	}
	if (!$host)
	{
		print STDERR "Warning: Request for graph without specifying host. Bailing out.\n";
		exit 1;
	}
	if (!$serv)
	{
		print STDERR "Warning: Request for graph without specifying service. Bailing out.\n";
		exit 1;
	}

	if (!$scale)
	{
		print STDERR "Warning: Request for graph without specifying scale. Bailing out.\n";
		exit 1;
	}
	else
	{
		if (!defined $TIMES{$scale})
		{
			print STDERR "Warning: Weird scale setting \"$scale\". Bailing out.\n";
			exit 1;
		}
	}
}

sub graph_usable
{
    my $filename = shift;
    my $time     = shift;

    if (-f $filename)
    {
	my @stats = stat (_);
	if (($stats[9]) > ($time - $time%$period{$scale}))
	{
#print STDERR "Skipping munin-graph-run for \"$filename\".\n";
#print STDERR ("Graph unexpired for $scale. ($stats[9] , $time, ", ($time%$period{$scale}), ", ", ($time - $time%$period{$scale}), ").\n");
	    return 0;
	}
	else
	{
#print STDERR ("Graph expired for $scale. ($stats[9] , $time, ", ($time%$period{$scale}), ", ", ($time - $time%$period{$scale}), ").\n");
	    return 1;
	}
    }
    return 0;
}

sub draw_graph
{
    my $host  = shift;
    my $serv  = shift;
    my $scale = shift;

    my @params = ($GRAPHER);
    push @params, @$scale;
    push @params, "--skip-locking", "--skip-stats", "--nolazy";
    push @params, "--host", $host, "--service", $serv;
    push @params, "STDERR>&STDOUT";

#print STDERR "Running: ", join (' ', @params), "\n";
    my $file = "/dev/null";
    open (IN, "-|") or exec @params;
    $file = join (' ', <IN>);
    close (IN);
    return $file;
}

sub modified
{
# Format of since_string If-Modified-Since: Wed, 23 Jun 2004 16:11:06 GMT

    my $since_string = shift;
    my $created      = shift;
    my $ifmodsec = &UnixDate (&ParseDateString ($since_string), "%s");

    return 1 if ($ifmodsec < $created);
    return 0;
}
