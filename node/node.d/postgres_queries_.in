#!@@PERL@@
# -*- perl -*-

# Plugin to monitor PostgreSQL query rate; returns the number of 
# sequential scans initiated, rows returned by sequential reads,
# index scans initiated, rows returned by index scans, inserts,
# updates, and deletes.
# 
# Find out more at 
#  http://www.postgresql.org/docs/8.2/interactive/monitoring-stats.html
#  (should work with PostgreSQL 7.x and 8.x)
#
# Bjÿrn Ruberg <bjorn@linpro.no> is a mack-daddy.
# Licenced under GPL v2.
#
# Revision History:
#  2005/03/10: v0.0001  Vajtsz (from openproject.hu)
#    "this is my first munin plugin sorry for dummy code"
#  2007/09/25: v1.0 Moses Moore <moc.iazom@sesom>
#    Nicolai Langfeldt - "I wounder if one of you would be bothered
#    to rework [this] over the pattern of postgres_block_read_ ..."
#
# Usage:
#
#       Symlink into /etc/munin/plugins/ and add the monitored
#       database to the filename. e.g.:
#
#       ln -s /usr/share/munin/plugins/postgres_block_read_ \
#         /etc/munin/plugins/postgres_block_read_SomeDatabase
#       This should, however, be given through autoconf and suggest.
#
#       If required, give username, password and/or PostgreSQL server
#       host through environment variables. 
# 
#       You must also activate PostgreSQL statistics. See
#       http://www.postgresql.org/docs/8.2/interactive/monitoring-stats.html
#       for how to enable this. Specifically, the following lines must
#       exist in your postgresql.conf:
#
#           stats_start_collector = true
#           stats_block_level = true
#
#
# Parameters:
#
#       config   (required)
#
# Config variables:
#
#       dbhost     - Which database server to use. Defaults to
#                    'localhost'. 
#       dbport     - Which port on the database server to connect to.
#                    Defaults to '5432'.
#       dbuser     - A PostgreSQL user account with read permission to
#                    the given database. Defaults to
#                    'postgres'. Anyway, Munin must be told which user
#                    this plugin should be run as. 
#       dbpass     - The corresponding password, if
#                    applicable. Default to undef. Remember that
#                    pg_hba.conf must be configured accordingly.
#
# Magic markers
#%# family=auto
#%# capabilities=autoconf suggest

use strict;
use DBI;
use Data::Dumper;
use vars qw ( $debug $suggest $configure $dbh );
use vars qw ( $dbhost $dbport $dbname $dbuser $dbpass );

# Need these variables at an early stage to enable
# autoconf and suggest
$dbhost = $ENV{'dbhost'} || ''; # Connect to localhost by default
$dbport = $ENV{'dbport'} || '5432';
$dbname = $ENV{'dbname'} || 'template1';
$dbuser = $ENV{'dbuser'} || 'postgres';
$dbpass = $ENV{'dbpass'} || '';

if (exists $ARGV[0]) {
    if ($ARGV[0] eq 'autoconf') {
        # Check for DBD::Pg
        if (! eval "require DBD::Pg;") {
            print "no (DBD::Pg not found)";
            exit 1;
        }
        # Then we try to detect Postgres presence by connecting to $dbname
        my $dsn = "dbi:Pg:";
        $dsn .= "dbname=$dbname;" if $dbname;
        $dsn .= "host=$dbhost;" if $dbhost;
        $dsn .= "port=$dbport;" if $dbport;
        my $tempdbh = DBI->connect ($dsn, $dbuser, $dbpass);
        if ($tempdbh) {
            print "yes\n";
            exit 0;
        } else {
            print "no (Can't connect to given host, please check environment settings)\n";
            exit 1;
        }
    } elsif ($ARGV[0] eq 'debug') {
        # Set debug flag
        $debug = 1;
    } elsif ($ARGV[0] eq 'config') {
        # Set config flag
        $configure = 1;
    } elsif ($ARGV[0] eq 'suggest') {
        # doesn't always work
        my @datasources = DBI->data_sources ('Pg');
        foreach my $dsn (grep !/\=template\d$/, @datasources) {
          (my $db = $dsn) =~ s/^.*=//;
          $db =~ s/"//g;    # "
          $db =~ s/ /\\ /g; # is whitespace allowed in database names?
          print "$db\n";
        }
        exit 0;
    }
}

# Must do this here, after checking for autoconf/suggest/etc, because the
# plugin must be able to run before it is linked to the databases.
my ($dbname) = ($0 =~ m/postgres_queries_(\S+)$/);
die "No dbname configured (did you make the proper symlink?)" unless $dbname;

my @datasources = DBI->data_sources ('Pg')
    or die ("Can't read any possible data sources: $?");

my $dsn = "DBI:Pg:";
$dsn .= "dbname=$dbname;" if $dbname;
$dsn .= "host=$dbhost;" if $dbhost;
$dsn .= "port=$dbport;" if $dbport;
print "#$dsn\n" if $debug;
my $dbh = DBI->connect ($dsn, $dbuser, $dbpass, {RaiseError =>1});
unless($dbh) {
    die("Database $dbname\@$dbhost (". $DBI::errstr .")\n");
}

if ($configure) {
    print <<EOF;
graph_title Postgres queries on $dbname
graph_args --base 1000
graph_vlabel Queries per \${graph_period}
graph_category PostgreSQL
graph_info Shows number of select, insert, update and delete queries
sel_seq.label s_selects
sel_seq.info Sequential selects on all tables
sel_seq.type DERIVE
sel_seq.min 0
sel_seq_rows.label s_select rows
sel_seq_rows.info Rows returned from sequential selects
sel_seq_rows.type DERIVE
sel_seq.min 0
sel_idx.label i_selects
sel_idx.info Sequential selects on all indexes
sel_idx.type DERIVE
sel_seq.min 0
sel_idx_rows.label i_select rows
sel_idx_rows.info Rows returned form index selects
sel_idx_rows.type DERIVE
sel_seq_rows.min 0
inserts.label inserts
inserts.info Rows inserted on all tables
inserts.type DERIVE
inserts.min 0
updates.label updates
updates.info Rows updated on all tables
updates.type DERIVE
updates.min 0
deletes.label deletes
deletes.info Rows deleted from all tables
deletes.type DERIVE
deletes.min 0
EOF
} else {
    my $sql = "SELECT SUM(seq_scan),SUM(seq_tup_read), ";
    $sql   .= "SUM(idx_scan),SUM(idx_tup_fetch), ";
    $sql   .= "SUM(n_tup_ins),SUM(n_tup_upd),SUM(n_tup_del) ";
    $sql   .= "from pg_stat_all_tables";
    print "# $sql\n" if $debug;
    my $sth = $dbh->prepare($sql);
    $sth->execute();
    if ($sth->rows > 0) {
      printf ("# Rows: %d\n",  $sth->rows) if $debug;
      my ($ss, $str, $is, $itf, $nti, $ntu, $ntd) = $sth->fetchrow_array();
      print "sel_seq.value $ss\n";
      print "sel_seq_rows.value $str\n";
      print "sel_idx.value $is\n";
      print "sel_idx_rows.value $itf\n";
      print "inserts.value $nti\n";
      print "updates.value $ntu\n";
      print "deletes.value $ntd\n";
    }
}

