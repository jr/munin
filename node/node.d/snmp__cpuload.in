#!/usr/bin/perl -w
#
# Copyright (C) 2006 Lars Strand
#
# Munin plugin to monitor CPU-load by use of SNMP.
# Based on snmp__df plugin.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; version 2 dated June,
# 1991.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
# $Log$
#
#%# family=snmpauto
#%# capabilities=snmpconf

use strict;
use Net::SNMP;

my $DEBUG = 0;

my $host      = $ENV{host}      || undef;
my $port      = $ENV{port}      || 161;
my $community = $ENV{community} || "public";

my $response;

if (defined $ARGV[0] and $ARGV[0] eq "snmpconf")
{
    print "index 1.3.6.1.2.1.25.3.3.1.2.\n";
    print "require 1.3.6.1.2.1.25.3.3.1.2.1\n"; # CPU #1
    exit 0;
}

if ($0 =~ /^(?:|.*\/)snmp_([^_]+)_cpuload$/)
{
    $host  = $1;
    if ($host =~ /^([^:]+):(\d+)$/)
    {
	$host = $1;
	$port = $2;
    }
}

elsif (!defined($host))
{
    print "# Debug: $0 -- $1\n" if $DEBUG;
    die "# Error: couldn't understand what I'm supposed to monitor.";
}

# CPUs
my $hrProcessorLoad = "1.3.6.1.2.1.25.3.3.1.2.";

my ($session, $error) = Net::SNMP->session(
    -hostname  => $host,
    -community => $community,
    -port      => $port
    );

if (!defined ($session))
{
    die "Croaking: $error";
}

# Bug? Only up to 9 cpus?
my $cpus = get_by_regex($session, $hrProcessorLoad, "[1-9]");


if (defined $ARGV[0] and $ARGV[0] eq "config")
{
    print "host_name $host\n";
    print "graph_title CPU usage (in %)
graph_category system
graph_args --upper-limit 100 -l 0 
graph_vlabel % 
graph_info This graph shows the CPU load on the system.
";
    foreach my $cpu (keys %$cpus)
    {
	# CPU #1 will have $fieldname "cpu" to retain compatability with
	# old snmp_cpuload plugin.
	my $cpun=$cpu;
	$cpun='' if $cpun ==1;
	print "cpu$cpun.label CPU $cpu\n";
	print "cpu$cpun.info CPU load on CPU $cpu\n";
    }
    exit 0;
}

# the values
while (my ($cpu, $load) = each(%$cpus)) {
    $cpu='' if $cpu ==1;
    print "cpu$cpu.value $load\n";
}


sub get_by_regex
{
    my $handle = shift;
    my $oid    = shift;
    my $regex  = shift;
    my $result = {};
    my $num    = 0;
    my $ret    = $oid . "0";
    my $response;
    
    print "# Starting browse of $oid...\n" if $DEBUG;
    
    while (1)
    {
	if ($num == 0)
	{
	    print "# Checking for $ret...\n" if $DEBUG;
	    $response = $handle->get_request ($ret);
	}
	if ($num or !defined $response)
	{
	    print "# Checking for sibling of $ret...\n" if $DEBUG;
	    $response = $handle->get_next_request ($ret);
	}
	if (!$response)
	{
	    return undef;
	}
	my @keys = keys %$response;
	$ret = $keys[0];
	print "# Analyzing $ret (compared to $oid)...\n" if $DEBUG;
	last unless ($ret =~ /^$oid/);
	$num++;
	next unless ($response->{$ret} =~ /$regex/);
	@keys = split (/\./, $ret);
	$result->{$keys[-1]} = $response->{$ret};;
	print "# Index $num: ", $keys[-1], " (", $response->{$ret}, ")\n" if $DEBUG;
    };
    return $result;
}
