#!@@PERL@@
# -*- perl -*-
#
# check_uptime.pl - nagios plugin 
# 
# Description: plugin to check the devices uptime
#
#
# Copyright (C) 2000 Sebastien Barbereau
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#
# Author: Sébastien Barbereau nagdevel@barbich.net
# COPYRIGHT (c) 2006 Andreas Schuldei
# merge a nagios plugin with a munin-plugin


#%# family=snmpauto
#%# capabilities=snmpconf

use strict;
use Net::SNMP;

my $DEBUG = 1;
my $MAXLABEL = 20;

my $host      = $ENV{host}      || undef;
my $port      = $ENV{port}      || 161;
my $community = $ENV{community} || "public";
my $iface     = $ENV{interface} || undef;

my $response;

if (defined $ARGV[0] and $ARGV[0] eq "snmpconf")
{
        print "require 1.3.6.1.2.1.1.3.0 [0-9]\n"; # Number
        exit 0;
}

if ($0 =~ /^(?:|.*\/)snmp_([^_]+)_uptime$/)
{
        $host  = $1;
        if ($host =~ /^([^:]+):(\d+)$/)
        {
                $host = $1;
                $port = $2;
        }
}
elsif (!defined($host))
{
        print "# Debug: $0 -- $1\n" if $DEBUG;
        die "# Error: couldn't understand what I'm supposed to monitor.";
}


if (defined $ARGV[0] and $ARGV[0] eq "config")
{
        print "host_name $host\n";
        print "graph_title System Uptime
graph_args --base 1000 -l 0
graph_vlabel uptime in days
graph_category system
graph_info This graph shows the number of days that the the host is up and running so far. 
uptime.label uptime
uptime.info The system uptime itself in days.
uptime.draw AREA
";

        exit 0;
}


my ($session, $error) = Net::SNMP->session(
                -hostname  => $host,
                -community => $community,
                -port      => $port,
		-translate => [
		              -timeticks => 0x0
			      ]
				     
        );

if (!defined ($session)) {
        die "Croaking: $error";
}

print "uptime.value ", 
    &get_single ($session, "1.3.6.1.2.1.1.3.0") || 'U',
    "\n";

sub get_single
{
        my $handle = shift;
        my $oid    = shift;

        print "# Getting single $oid...\n" if $DEBUG;

        $response = $handle->get_request ($oid);
        if (!defined $response->{$oid})
        {
            return undef;
        }
	return $response->{$oid}/8640000;
}
