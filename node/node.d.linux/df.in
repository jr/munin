#!@@PERL@@
# -*-  perl -*-

=head1 NAME

df - Munin plugin to monitor disk usage

=head1 APPLICABLE SYSTEMS

Every Linux system with df installed.

=head1 CONFIGURATION

The plugin excludes per default the following special, read-only or dynamically allocating file systems from graphing: "none unknown iso9660 squashfs udf romfs ramfs". 
To change this set the environment variable "exclude" with a list of space separated fs types. The environment variables "warning" and "critical" sets the percentage from which Munin starts to warn about the disk usage. 

This configuration snipplet is an example with the defaults:

  [df]
  env.exclude none unknown iso9660 squashfs udf romfs ramfs
  env.warning 92
  env.critical 98

Put it in a file in $(CONFDIR)/plugin-conf.d/ and restart the munin-node.

=head1 MAGIC MARKERS

  #%# family=auto
  #%# capabilities=autoconf

=head1 BUGS

Multiple mounted file systems like tmpfs or devices in bind mounts are only graphed once.

=head1 VERSION

$Id$

=head1 AUTHOR

Unknown

=head1 LICENSE

GPLv2

=cut

use strict;
use Munin::Plugin;

my %mounts;

open (MOUNTS,"/proc/mounts") or die "Could not /proc/mounts for reading.";
while (<MOUNTS>) {
    # Does perl really not have any shorthand for this? I guess it has.
    if ( /^(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)/ ) {
	$mounts{$2}=$3;
    }
}
close MOUNTS;

my $exclude=$ENV{'exclude'} || 'none unknown iso9660 squashfs udf romfs ramfs';
my $dfopts = "-P -l ".join(' -x ',('',split('\s+',$exclude)));

sub print_values() {

    # Read from df
    open (DF,"df $dfopts |") or die "Could not open pipe from df, $!";
    <DF>; # Skip the header
    while (<DF>) {
	next if /\/\//;
	
	# Parse the output
	if ( /^(\S+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\S+)\s+(\S+)/ ) {
	    my $fs=$mounts{$6};
	    my $ps=$5;
	    my $name=clean_fieldname($1);

	    $ps =~ s/\%//;
	    print $name, ".value ", $ps, "\n";
	}
    }
    close DF;
    die "Error executing df. Exit code $?\n" if $?;
}

if ( $ARGV[0] eq "autoconf" ) {
    if (`@@PERL@@ $0` eq "" ) {
	print "no\n";
	exit 1;
    } else {
	print "yes\n";
	exit 0;
    }
}

if ( $ARGV[0] eq "config" ) {

    # The headers
    print "graph_title Disk usage (in %)\n";
    print "graph_args --upper-limit 100 -l 0\n";
    print "graph_vlabel %\n";
    print "graph_scale no\n";
    print "graph_category disk\n";

    # Read from df
    open (DF,"df $dfopts |") or die "Unable to open pipe from df: $!";
    <DF>; # Skip the header
    while (<DF>) {
	next if /\/\//;
	
	# Parse the output
	if ( /^(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)/ ) {
	    my $fs=$mounts{$6};
	    my $dir=$6;
	    my $name=clean_fieldname($1);

	    # Create and print labels
	    print $name, ".label ", $dir, "\n";

            print_thresholds($name);
	}
    }
    close DF;
    die "Error executing df. Exit code $?\n" if $?;
    exit 0;
}

print_values();
